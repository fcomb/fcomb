fcomb-server {
  actor-system-name = "fcomb"

  akka {
    logger-startup-timeout = 10s
    log-dead-letters-during-shutdown = off
    loglevel = "INFO"
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

    actor.provider = "akka.cluster.ClusterActorRefProvider"

    cluster {
      seed-nodes = []
      auto-down-unreachable-after = 10s

      sharding {
        state-store-mode = "ddata"
      }
    }

    http {
      server {
        server-header = "fcomb"
        transparent-head-requests = off
        parsing.max-content-length = infinite
      }

      client.user-agent-header = "fcomb"
    }

    remote {
      netty.tcp {
        hostname = "127.0.0.1"
        port = 0
      }
    }

    persistence {
      journal.plugin = "jdbc-journal"
      snapshot-store.plugin = "jdbc-snapshot-store"
    }
  }

  rest-api {
    interface = "0.0.0.0"
    http-port = 8080
    https-port = 8443
  }

  tls {
    cert = ""
    key = ""
  }

  storage {
    path = "/data"
  }

  gc {
    # How much time we give to incomplete upload files to live before gc will delete them
    outdated-period = "1d"

    # Interval to check to find outdated incomplete files and delete them
    outdated-check-interval = "1h"

    # Interval to check to find files which marked to delete and delete them
    deleting-check-interval = "10m"
  }

  jdbc-slick {
    dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
    maxConnections = 50
    numThreads = 10
  }

  security {
    # docker distribution basic auth realm
    realm = "fcomb registry"

    # Allow to user sign up without an admin
    open-sign-up = false

    # Allow to pull a public repositories for anonymous users
    anonymous-public-repositories = false
  }

  jwt {
    secret = ""
    session-ttl = 30d
    reset-password-ttl = 1h
  }

  smtp {
    host = "smtp.googlemail.com"
    port = 465
    user = ""
    password = ""
    from = "noreply@fcomb.com"
    fromName = "fcomb"
    ssl = true
    tls = false
  }
}
